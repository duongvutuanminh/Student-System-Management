package screen;

import java.awt.Color;
import java.awt.Component;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

import decor.RoundedBorder;
import excel_operator.ExcelReader;
import excel_operator.ExcelWriter;
import jbdc_connection.JDBCConnection;
import jbdc_connection.JDBCSStudentUtils;
import student.Student;
import javax.swing.JRadioButton;

public class StudentScreen extends JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private JTable studentTable;
	private JTextField nameInput;
	private JTextField idInput;
	private JTextField telInput;
	private int[] selectedRows;
	private List<Student> currentStudentList;
	private ResourceBundle resourceBundle;
	
	
	/**
	 * just for testing purposes
	 */

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					StudentScreen frame = new StudentScreen();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public StudentScreen() {
		//Check the connection with the database
		JDBCConnection.test();
		selectedRows = new int[] {};
		
//		ResourceBundle resourceBundle = ResourceBundle.getBundle("resource_bundle_configurations/resource_bundle");
//		System.out.println(resourceBundle.getString("student_screen_big_label"));
		
		Locale.setDefault(new Locale("en", "US"));
		resourceBundle = ResourceBundle.getBundle("resource_bundle_configs/resource_bundle");
		
		setTitle(resourceBundle.getString("student_screen_title"));
		setIconImage(Toolkit.getDefaultToolkit().getImage(StudentScreen.class.getResource("/images/ant english.jpg")));
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1200, 700);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		JMenuBar menuBar = new JMenuBar();
		menuBar.setFont(new Font("Rockwell", Font.PLAIN, 15));
		UIManager.put("Menu.font", new Font("sans-serif", Font.PLAIN, 18));
		setJMenuBar(menuBar);
		
		JMenu studentBtn = new JMenu(resourceBundle.getString("student_button_title"));
		menuBar.add(studentBtn);
		
		JMenu classBtn = new JMenu(resourceBundle.getString("class_button_title"));
		classBtn.addMouseListener(new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent e) {
				
				
			}

			@Override
			public void mousePressed(MouseEvent e) {
			    
			    try {
			        if (e.getButton() == MouseEvent.BUTTON1) {
			            dispose();
			            ClassScreen classScreen = new ClassScreen();
			            classScreen.setVisible(true);
			        }
			    } catch (Exception error) {
			        error.printStackTrace();
			    }
			}


			@Override
			public void mouseReleased(MouseEvent e) {
				
				
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				
				
			}

			@Override
			public void mouseExited(MouseEvent e) {
				
				
			}
			
		});
		menuBar.add(classBtn);
		
		JMenu exitBtn = new JMenu(resourceBundle.getString("exit_button_title"));
		exitBtn.addMouseListener(new MouseListener() {
			@Override
			public void mouseClicked(MouseEvent e) {
				
				
			}

			@Override
			public void mousePressed(MouseEvent e) {
				
				if (e.getButton() == MouseEvent.BUTTON1) { 
					try {
						dispose();
					} catch (Exception error) {
						error.printStackTrace();
					}
				}
			}

			@Override
			public void mouseReleased(MouseEvent e) {
				
				
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				
				
			}

			@Override
			public void mouseExited(MouseEvent e) {
				
				
			}
		});
		menuBar.add(exitBtn);
		
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JLabel lblNewLabel = new JLabel(resourceBundle.getString("student_screen_big_label"));
		lblNewLabel.setForeground(new Color(244, 164, 96));
		lblNewLabel.setFont(new Font("San-serif", Font.PLAIN, 34));
		lblNewLabel.setBounds(10, -12, 612, 56);
		contentPane.add(lblNewLabel);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(20, 45, 850, 574);
		contentPane.add(scrollPane);
		
		studentTable = new JTable();
		studentTable.setCellSelectionEnabled(true);
		studentTable.setBackground(new Color(255, 255, 255));
		studentTable.setBorder(new CompoundBorder());
		studentTable.setModel(new DefaultTableModel(
			new Object[][] {
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
				{null, null, null, null, null, null, null, null},
			},
			new String[] {
				/**
				 * Column model
				 * 0,   1,       2,           3, 			  4, 			5,                6, 			  7
				 */
					resourceBundle.getString("student_id_column"), 
					resourceBundle.getString("student_name_column"),
					resourceBundle.getString("student_gender_column"),
					resourceBundle.getString("student_yob_column"),
					resourceBundle.getString("student_englishName_column"),
					resourceBundle.getString("student_phoneNo_column"),
					resourceBundle.getString("student_parentName_column"),
					resourceBundle.getString("student_parentNumber_column"),
			}
		) {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			boolean[] columnEditables = new boolean[] {
				false, false, false, false, false, false, false, false
			};
			public boolean isCellEditable(int row, int column) {
				return columnEditables[column];
			}
		});
		studentTable.getColumnModel().getColumn(0).setPreferredWidth(54);
		studentTable.getColumnModel().getColumn(1).setPreferredWidth(139);
		studentTable.getColumnModel().getColumn(3).setPreferredWidth(88);
		studentTable.getColumnModel().getColumn(4).setPreferredWidth(80);
		studentTable.getColumnModel().getColumn(5).setPreferredWidth(86);
		studentTable.getColumnModel().getColumn(6).setPreferredWidth(114);
		studentTable.getColumnModel().getColumn(7).setPreferredWidth(86);
		scrollPane.setViewportView(studentTable);
		
		// centering the text in some columns
		TableColumn[] colArr = {studentTable.getColumnModel().getColumn(0),
								studentTable.getColumnModel().getColumn(2),
								studentTable.getColumnModel().getColumn(3),
								studentTable.getColumnModel().getColumn(4),
								studentTable.getColumnModel().getColumn(5),
								studentTable.getColumnModel().getColumn(7),
		};
		
		// creating the Centering properties
		DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();  
        dtcr.setHorizontalAlignment(SwingConstants.CENTER);
		for (TableColumn col : colArr) {
	        col.setCellRenderer(dtcr);
		}
		
		//show data
		showData(JDBCSStudentUtils.findAll());
		ListSelectionModel selectionModel = studentTable.getSelectionModel();
		selectionModel.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

		selectionModel.addListSelectionListener(new ListSelectionListener() {
		    public void valueChanged(ListSelectionEvent e) {
		        if (!e.getValueIsAdjusting()) {
		            selectedRows = studentTable.getSelectedRows();
		            System.out.println("Selected rows: " + Arrays.toString(selectedRows));
		        }
		    }
		});
		
		JLabel nameLabel = new JLabel(resourceBundle.getString("student_name_lbl"));
		nameLabel.setFont(new Font("Rockwell", Font.PLAIN, 15));
		nameLabel.setHorizontalAlignment(SwingConstants.CENTER);
		nameLabel.setBounds(889, 119, 61, 27);
		contentPane.add(nameLabel);
		
		nameInput = new JTextField();
		nameInput.setBounds(960, 121, 218, 27);
		contentPane.add(nameInput);
		nameInput.setColumns(10);
		
		JButton findBtn = new JButton(resourceBundle.getString("student_find_with_infos"));
		findBtn.addMouseListener(new findStudentListener());
		findBtn.setBounds(960, 256, 218, 40);
		findBtn.setBorder(new RoundedBorder(15));
		contentPane.add(findBtn);
		
		JButton deleteBtn = new JButton(resourceBundle.getString("student_delete"));
		deleteBtn.addMouseListener(new deleteListener());
		deleteBtn.setBounds(960, 579, 218, 40);
		deleteBtn.setBorder(new RoundedBorder(15));
		contentPane.add(deleteBtn);
		
		JButton refreshBtn = new JButton("");
		refreshBtn.addMouseListener(new refreshListener());
		refreshBtn.setIcon(new ImageIcon(StudentScreen.class.getResource("/images/Button-Refresh-icon.png")));
		refreshBtn.setBounds(870, 44, 71, 40);
		refreshBtn.setBorder(new RoundedBorder(15));
		contentPane.add(refreshBtn);
		
		JButton updateBtn = new JButton(resourceBundle.getString("student_update"));
		updateBtn.addMouseListener(new updateListener());
		updateBtn.setBounds(960, 528, 218, 40);
		updateBtn.setBorder(new RoundedBorder(15));
		contentPane.add(updateBtn);
		
		idInput = new JTextField();
		idInput.setColumns(10);
		idInput.setBounds(960, 159, 218, 27);
		contentPane.add(idInput);
		
		JLabel idLabel = new JLabel(resourceBundle.getString("student_id_lbl_find"));
		idLabel.setHorizontalAlignment(SwingConstants.CENTER);
		idLabel.setFont(new Font("Rockwell", Font.PLAIN, 15));
		idLabel.setBounds(889, 157, 61, 27);
		contentPane.add(idLabel);
		
		JLabel telLabel = new JLabel(resourceBundle.getString("student_tel_lbl_find"));
		telLabel.setHorizontalAlignment(SwingConstants.CENTER);
		telLabel.setFont(new Font("Rockwell", Font.PLAIN, 15));
		telLabel.setBounds(889, 195, 61, 27);
		contentPane.add(telLabel);
		
		telInput = new JTextField();
		telInput.setColumns(10);
		telInput.setBounds(960, 197, 218, 27);
		contentPane.add(telInput);
		
		JButton insertBtn = new JButton(resourceBundle.getString("student_insert"));
		insertBtn.addMouseListener(new insertListener());
		insertBtn.setBorder(new RoundedBorder(15));
		insertBtn.setBounds(960, 477, 218, 40);
		contentPane.add(insertBtn);
		
		JButton outputBtn = new JButton(resourceBundle.getString("student_output"));
		outputBtn.addMouseListener(new OutputListener());
		outputBtn.setBorder(new RoundedBorder(15));
		outputBtn.setBounds(960, 375, 218, 40);
		contentPane.add(outputBtn);
		
		JButton inputBtn = new JButton(resourceBundle.getString("student_input"));
		inputBtn.addMouseListener(new InputListener());
		inputBtn.setBorder(new RoundedBorder(15));
		inputBtn.setBounds(960, 426, 218, 40);
		contentPane.add(inputBtn);
		
		JRadioButton VIRadioSelector = new JRadioButton("Tiếng Việt");
		VIRadioSelector.setSelected(true);
		VIRadioSelector.setBounds(960, 48, 109, 23);
		contentPane.add(VIRadioSelector);
		
		JRadioButton ENRadioSelector = new JRadioButton("English");
		ENRadioSelector.setBounds(960, 74, 109, 23);
		contentPane.add(ENRadioSelector);
	}
	
	
	public void showData(List<Student> studentList) {
		currentStudentList = new ArrayList<Student>();
		currentStudentList.addAll(studentList);
		DefaultTableModel tableModel = (DefaultTableModel) studentTable.getModel();
		tableModel.setRowCount(0);
		studentList.forEach((student) -> {
			String gender = (student.getGender() == 0) ? resourceBundle.getString("student_gender_male") : resourceBundle.getString("student_gender_female");
			tableModel.addRow(new Object[] {
					student.getId(),
					student.getName(),
					gender,
					student.getYob(),
					student.getEnglishName(),
					student.getContactNumber(),
					student.getParentName(),
					student.getParentNumber()
			});
		});
	}
	
	
	private class refreshListener implements MouseListener {

		@Override
		public void mouseClicked(MouseEvent e) {
			
			
		}

		@Override
		public void mousePressed(MouseEvent e) {
			
			if (e.getButton() == MouseEvent.BUTTON1) { 
				try {
					showData(JDBCSStudentUtils.findAll());
				} catch (Exception error) {
					error.printStackTrace();
				}
			}
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			
			
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			
			
		}

		@Override
		public void mouseExited(MouseEvent e) {
			
			
		}
		
	}

	private class findStudentListener implements MouseListener {

		@Override
		public void mouseClicked(MouseEvent e) {
			
			
		}

		@Override
		public void mousePressed(MouseEvent e){
			
			if (e.getButton() == MouseEvent.BUTTON1) {
				try {
					String nameInText = nameInput.getText().strip();
					int idInText = 0;
					if (idInput.getText().strip() != "") {
						idInText =  Integer.valueOf(idInput.getText().strip());
					}
					String telInText = telInput.getText().strip();
					if (nameInText == "" && idInText == 0 && telInText == "") {
						throw new EmptyFieldWarning();
					}
					else {
						showData(JDBCSStudentUtils.findStudents(nameInText, idInText, telInText));
					}
				} catch (Exception error) {
					error.printStackTrace();
				}
			}
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			
			
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			
			
		}

		@Override
		public void mouseExited(MouseEvent e) {
			
			
		}
		
	}
	
	private class insertListener implements MouseListener {
		@Override
		public void mouseClicked(MouseEvent e) {
			
			
		}

		@Override
		public void mousePressed(MouseEvent e) {
			
			if (e.getButton() == MouseEvent.BUTTON1) {
				try {
					InsertScreen insertScreen = new InsertScreen();
					insertScreen.setVisible(true);
					insertScreen.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
					insertScreen.addWindowListener(new WindowAdapter() {
						  @Override
						  public void windowClosed(WindowEvent e) {
						    showData(JDBCSStudentUtils.findAll());
						  }
						});
				} catch (Exception error) {
					error.printStackTrace();
				}
			}
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			
			
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			
			
		}

		@Override
		public void mouseExited(MouseEvent e) {
			
			
		}
	}
	
	private class deleteListener implements MouseListener {

		@Override
		public void mouseClicked(MouseEvent e) {
			
			
		}

		@Override
		public void mousePressed(MouseEvent e) {
			
			if (e.getButton() == MouseEvent.BUTTON1) {
				try {
					if (selectedRows.length == 0) {
						JOptionPane.showMessageDialog(null, "You must select row(s) before deleting from database", 
								"Error", JOptionPane.ERROR_MESSAGE);
					}
					else {
						int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the selected student(s)?",
		                        "Confirm Deletion", JOptionPane.YES_NO_OPTION);
						if (result == JOptionPane.YES_OPTION) {
						   //delete student(s)
						   List<Student> studentList = JDBCSStudentUtils.findAll();
						   for (int i = 0; i < selectedRows.length; i++) {
						      Student deletedStudent = studentList.get(selectedRows[i]);
						      JDBCSStudentUtils.delete(deletedStudent);
						   }
						   showData(JDBCSStudentUtils.findAll());
						}
					}
				} catch (Exception error) {
					error.printStackTrace();
				}
			}
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			
			
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			
			
		}

		@Override
		public void mouseExited(MouseEvent e) {
			
			
		}
	}
	
	private class updateListener implements MouseListener {
		@Override
		public void mouseClicked(MouseEvent e) {
			
			
		}

		@Override
		public void mousePressed(MouseEvent e) {
			
			String studentID = JOptionPane.showInputDialog("Enter student ID:");
			if (studentID != null && !studentID.isEmpty()) {
			   try {
			      Student student = JDBCSStudentUtils.findByID(studentID);
			 
			      if (student != null) {
			         //open update dialog or update student information here
			    	  System.out.println("Updating student: " + student.getName());
			    	  UpdateScreen updateScreen = new UpdateScreen(student);
			    	  updateScreen.setVisible(true);
			    	  updateScreen.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			    	  updateScreen.addWindowListener(new WindowAdapter() {
							  @Override
							  public void windowClosed(WindowEvent e) {
							    showData(JDBCSStudentUtils.findAll());
							  }
							});
			      } else {
			         JOptionPane.showMessageDialog(null, "No student found with ID: " + studentID,
			                                 "Error", JOptionPane.ERROR_MESSAGE);
			      }
			   } catch (Exception error) {
			      error.printStackTrace();
			   }
			}
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			
			
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			
			
		}

		@Override
		public void mouseExited(MouseEvent e) {
			
			
		}
	}
	
	private class OutputListener implements MouseListener {

		private Component outputDecisionButton;

		@Override
		public void mouseClicked(MouseEvent e) {
			
			
		}

		@Override
	    public void mousePressed(MouseEvent e) {
	        JFileChooser fileChooser = new JFileChooser();
	        fileChooser.setDialogTitle("Choose output folder");
	        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
	        int userSelection = fileChooser.showSaveDialog(outputDecisionButton);
	        if (userSelection == JFileChooser.APPROVE_OPTION) {
	            try {
					String folderLocation = fileChooser.getSelectedFile().getAbsolutePath();
					ExcelWriter.writeStudentsToFile(JDBCSStudentUtils.findAll(), folderLocation);
					JOptionPane.showConfirmDialog(null, "Output available students to students.xlsx successfully!");
				} catch (HeadlessException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
	        }
	    }


		@Override
		public void mouseReleased(MouseEvent e) {
			
			
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			
			
		}

		@Override
		public void mouseExited(MouseEvent e) {
			
		}	
	}
	
	private class InputListener implements MouseListener {

		@Override
		public void mouseClicked(MouseEvent e) {
			
			
		}

		@Override
		public void mousePressed(MouseEvent e) {
			JFileChooser fileChooser = new JFileChooser();
			fileChooser.setDialogTitle("Choose input file");
		    fileChooser.setFileFilter(new FileNameExtensionFilter("Excel file (.xlsx)", "xlsx"));
	        int result = fileChooser.showOpenDialog(null);
	        if (result == JFileChooser.APPROVE_OPTION) {
	            try {
					File selectedFile = fileChooser.getSelectedFile();
					ExcelReader.readStudentsToDatabase(selectedFile);
					JOptionPane.showConfirmDialog(null, "Write students to database from excel file successfully!");
				} catch (HeadlessException e1) {
					e1.printStackTrace();
				}
	        }
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			
			
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			
			
		}

		@Override
		public void mouseExited(MouseEvent e) {
			
			
		}
		
	}
	
	private class EmptyFieldWarning extends Exception {
		private static final long serialVersionUID = 1L;

		public EmptyFieldWarning() {
			 JFrame f=new JFrame();  
			 JOptionPane.showMessageDialog(f,"You need to fill out at least 1 field: name, id or telephone number!");  
		}
	}
}
